<?php

use Drupal\Core\Ajax\AjaxResponse;
use Drupal\Core\Ajax\InvokeCommand;
use Drupal\Core\Form\FormStateInterface;
use Drupal\node\Entity\Node;

/**
 * Implements hook_form_alter()
 */
function isp_stripe_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  if (stripos($form_id, 'webform_submission_event_signup_form') !== false) {
    $form['#attached']['library'][] = 'isp_stripe/everything_stripe';

    $form['actions']['register_pay'] = [
      '#type' => 'button',
      '#value' => t('Pull up Stripe'),
      '#ajax' => [
        'callback' => 'isp_stripe_callback',
        'event' => 'click',
        'prevent' => 'submit',
        'progress' => [
            'type' => 'throbber',
            'message' => t('Matching...'),
        ],
      ],
      '#attributes' => [
        'data-type' => 'data-stripe-init',
      ],
    ];
    $form['actions']['submit']['#attributes']['data-stripe-submit'] = 'stripe-webform-submit-button';

    $form['#attributes']['data-stripe-form-id'] = $form['#webform_id'];

    $form['elements']['event']['#default_value'] = 4;
  }
}

function isp_stripe_callback(&$form, FormStateInterface $form_state, $request) {
  /* Using getUserInput to get a proper count of entity checkbox items user selects /*/
  $form_values = $form_state->getUserInput();
  $params = [
    'event' => $form_values['event'],
    'ages' => count(
          array_filter((array) $form_values['age_category'])
    ),
    'competitions' => count(
          array_filter((array) $form_values['competition'])
    ),
    'isTested' => strpos($form_values['tested_or_untested'], 'Tested') !== FALSE,
  ];
  $amount = !empty($params) ? calculate_total($params) : 0;

  $stripe_wrapper = \Drupal::service('stripe_webform_payment.stripe');
  $client_secret = $stripe_wrapper->getClientSecret(floatval($amount) * 100, 'cad');
  $stripe_settings = [
    'publishableKey' => $stripe_wrapper->getPublishableKey(),
    'clientSecret' => $client_secret['clientSecret'] ?? '',
    'webformId' => $form['#webform_id'],
    'clientEmail' => $form_state->getValue('email'),
    'clientName' => $form_state->getValue('first_name') . ' ' . $form_state->getValue('last_name'),
  ];

  $ajax = new AjaxResponse();
  $ajax->addCommand(new InvokeCommand(NULL, 'myAjaxCallback', [$stripe_settings]));

  return $ajax;
}

function get_event_price($nid, bool $isTested): string|null {
  $node = Node::load($nid);

  if ($node) {
    if ($isTested && $node->hasField('field_tested_price')) {
      return $node->get('field_tested_price')->value;
    }
    else {
      return $node->get('field_untested_price')->value;
    }
  }

  return NULL;
}

/**
 * @param array $params
 *   containing event: nid, ages: int, competitions: int, isTested: bool
 *
 * @return float
 *   Cost to register
 */
function calculate_total(array $params): float {
  $total = 0;
  $total += get_event_price($params['event'], $params['isTested']);

  if ($params['ages'] > 1) {
    $total += ($params['ages'] - 1) * 30;
  }
  if ($params['competitions'] > 1) {
    $total += ($params['competitions'] - 1) * 30;
  }

  return $total;
}
